{"version":3,"sources":["webpack:///./src/components/pagination.tsx","webpack:///./src/pages/index.tsx"],"names":["Pagination","numPages","currentPage","pathBase","isFirst","isLast","omitFirst","omitLast","prevPage","toString","nextPage","className","to","rel","Array","from","length","_","i","key","pageQuery","BlogIndex","data","location","pageContext","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","style","listStyle","map","post","frontmatter","fields","slug","itemScope","itemType","itemProp","date","tags","tag","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"yMAgGeA,EAvFI,SAAC,GAAyD,IAAvDC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,SACrCC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBD,EAEzBK,EAAYJ,EAAc,EADd,EAEZK,EAAWN,EAAWC,EAFV,EAGZM,EACJN,EAAc,GAAM,EAAIC,EAAWA,GAAYD,EAAc,GAAGO,WAC5DC,EAAWP,GAAYD,EAAc,GAAGO,WA4E9C,OAvEe,IAAbR,EACE,yBAAKU,UAAU,cACb,6BACIP,EAKA,8BAXO,MAOP,kBAAC,OAAD,CAAMQ,GAAIJ,EAAUK,IAAI,QAPjB,OAeX,6BACE,6BAGKT,GACC,6BACE,wBAAIO,UAAU,qBACZ,kBAAC,OAAD,CAAMC,GAAIT,GAAV,KACCG,GAAa,qCAKrBQ,MAAMC,KAAK,CAAEC,OAAQf,IAAY,SAACgB,EAAGC,GAAJ,OAChCA,EAAI,IAAMhB,EACR,wBACEiB,IAAG,qBAAsBD,EAAI,GAC7BP,UAAU,mBAEV,8BAAOO,EAAI,IAGbA,EAAI,GACJA,EAAIjB,EAAW,GACfC,EA9CI,EA8CsBgB,EAAI,GAC9BA,EAAI,EAAIhB,EA/CJ,GAgDF,wBACEiB,IAAG,qBAAsBD,EAAI,GAC7BP,UAAU,gBAEV,kBAAC,OAAD,CAAMC,GAAIT,GAAkB,IAANe,EAAU,GAAKA,EAAI,IAAKA,EAAI,QAOvDb,GACC,wBAAIM,UAAU,qBACXJ,GAAY,mCACb,kBAAC,OAAD,CAAMK,GAAIT,EAAWF,GAAWA,MAO1C,6BACII,EAKA,8BAnEO,MA+DP,kBAAC,OAAD,CAAMO,GAAIF,EAAUG,IAAI,QA/DjB,QAuEX,MChBKO,GAFEC,UAlEG,SAAC,GAAoC,MAAlCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC7BC,GAAY,UAAAH,EAAKI,KAAKC,oBAAV,eAAwBC,QAAxB,QACZC,EAAQP,EAAKQ,kBAAkBC,MAC7B7B,EAA0BsB,EAA1BtB,YAAaD,EAAauB,EAAbvB,SAErB,OAAqB,IAAjB4B,EAAMb,OAEN,kBAAC,IAAD,CAAQO,SAAUA,EAAUK,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,QACX,yLAUJ,kBAAC,IAAD,CAAQL,SAAUA,EAAUK,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,QACX,wBAAII,MAAO,CAAEC,UAAW,SACrBJ,EAAMK,KAAI,SAAAC,GACT,IAAMP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KAEpD,OACE,wBAAInB,IAAKgB,EAAKE,OAAOC,MACnB,6BACE3B,UAAU,iBACV4B,WAAS,EACTC,SAAS,6BAET,gCACE,4BACE,kBAAC,OAAD,CAAM5B,GAAIuB,EAAKE,OAAOC,KAAMG,SAAS,OACnC,0BAAMA,SAAS,YAAYb,KAG/B,+BAAQO,EAAKC,YAAYM,MACxBP,EAAKC,YAAYO,KAAKT,KAAI,SAACU,GAC1B,OACE,yBAAKjC,UAAU,mHAEZiC,OAKT,iCACE,uBACEC,wBAAyB,CACvBC,OAAQX,EAAKC,YAAYW,aAAeZ,EAAKa,SAE/CP,SAAS,uBAQvB,kBAAC,EAAD,CAAYxC,SAAUA,EAAUC,YAAaA,EAAaC,SAAS,QAOhD","file":"component---src-pages-index-tsx-df67619c9969d5fb65ee.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\ninterface PaginationProps {\n  numPages: number\n  currentPage: number\n  pathBase?: string\n}\n\nconst Pagination = ({ numPages, currentPage, pathBase }: PaginationProps) => {\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const pageLimit = 3\n  const omitFirst = currentPage - 1 > pageLimit\n  const omitLast = numPages - currentPage > pageLimit\n  const prevPage =\n    currentPage - 1 === 1 ? pathBase : pathBase + (currentPage - 1).toString()\n  const nextPage = pathBase + (currentPage + 1).toString()\n\n  const prevText = '前へ'\n  const nextText = '次へ'\n  const paginationTag =\n    numPages !== 1 ? (\n      <nav className=\"pagination\">\n        <div>\n          {!isFirst ? (\n            <Link to={prevPage} rel=\"prev\">\n              {prevText}\n            </Link>\n          ) : (\n            <span>{prevText}</span>\n          )}\n        </div>\n\n        <div>\n          <ul>\n            {\n              /*FirstPage*/\n              !isFirst && (\n                <div>\n                  <li className=\"number--firstlast\">\n                    <Link to={pathBase}>1</Link>\n                    {omitFirst && <span>…</span>}\n                  </li>\n                </div>\n              )\n            }\n            {Array.from({ length: numPages }, (_, i) =>\n              i + 1 === currentPage ? (\n                <li\n                  key={`pagination-number${i + 1}`}\n                  className=\"number--current\"\n                >\n                  <span>{i + 1}</span>\n                </li>\n              ) : (\n                i > 0 &&\n                i < numPages - 1 &&\n                currentPage - pageLimit < i + 1 &&\n                i + 1 < currentPage + pageLimit && (\n                  <li\n                    key={`pagination-number${i + 1}`}\n                    className=\"number--link\"\n                  >\n                    <Link to={pathBase + (i === 0 ? '' : i + 1)}>{i + 1}</Link>\n                  </li>\n                )\n              )\n            )}\n            {\n              /*LastPage*/\n              !isLast && (\n                <li className=\"number--firstlast\">\n                  {omitLast && <span>…</span>}\n                  <Link to={pathBase + numPages}>{numPages}</Link>\n                </li>\n              )\n            }\n          </ul>\n        </div>\n\n        <div>\n          {!isLast ? (\n            <Link to={nextPage} rel=\"next\">\n              {nextText}\n            </Link>\n          ) : (\n            <span>{nextText}</span>\n          )}\n        </div>\n      </nav>\n    ) : null\n\n  return paginationTag\n}\n\nexport default Pagination","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Pagination from '../components/pagination'\n\nconst BlogIndex = ({ data, location, pageContext }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const { currentPage, numPages } = pageContext\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"TOP\" />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"TOP\" />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                  {post.frontmatter.tags.map((tag) => {\n                    return (\n                      <div className=\"ml-4 text-xs inline-flex items-center font-bold leading-sm px-3 py-1 rounded-full bg-white text-gray-700 border\"\n                      >\n                        {tag}\n                      </div>\n                    )\n                  })}\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      <Pagination numPages={numPages} currentPage={currentPage} pathBase=\"/\" />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY-MM-DD\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}